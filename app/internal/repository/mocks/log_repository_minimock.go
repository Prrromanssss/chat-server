// Code generated by http://github.com/gojuno/minimock (v3.3.14). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/Prrromanssss/chat-server/internal/repository.LogRepository -o log_repository_minimock.go -n LogRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/Prrromanssss/chat-server/internal/model"
	"github.com/gojuno/minimock/v3"
)

// LogRepositoryMock implements repository.LogRepository
type LogRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateAPILog          func(ctx context.Context, params model.CreateAPILogParams) (err error)
	inspectFuncCreateAPILog   func(ctx context.Context, params model.CreateAPILogParams)
	afterCreateAPILogCounter  uint64
	beforeCreateAPILogCounter uint64
	CreateAPILogMock          mLogRepositoryMockCreateAPILog
}

// NewLogRepositoryMock returns a mock for repository.LogRepository
func NewLogRepositoryMock(t minimock.Tester) *LogRepositoryMock {
	m := &LogRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateAPILogMock = mLogRepositoryMockCreateAPILog{mock: m}
	m.CreateAPILogMock.callArgs = []*LogRepositoryMockCreateAPILogParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mLogRepositoryMockCreateAPILog struct {
	optional           bool
	mock               *LogRepositoryMock
	defaultExpectation *LogRepositoryMockCreateAPILogExpectation
	expectations       []*LogRepositoryMockCreateAPILogExpectation

	callArgs []*LogRepositoryMockCreateAPILogParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// LogRepositoryMockCreateAPILogExpectation specifies expectation struct of the LogRepository.CreateAPILog
type LogRepositoryMockCreateAPILogExpectation struct {
	mock      *LogRepositoryMock
	params    *LogRepositoryMockCreateAPILogParams
	paramPtrs *LogRepositoryMockCreateAPILogParamPtrs
	results   *LogRepositoryMockCreateAPILogResults
	Counter   uint64
}

// LogRepositoryMockCreateAPILogParams contains parameters of the LogRepository.CreateAPILog
type LogRepositoryMockCreateAPILogParams struct {
	ctx    context.Context
	params model.CreateAPILogParams
}

// LogRepositoryMockCreateAPILogParamPtrs contains pointers to parameters of the LogRepository.CreateAPILog
type LogRepositoryMockCreateAPILogParamPtrs struct {
	ctx    *context.Context
	params *model.CreateAPILogParams
}

// LogRepositoryMockCreateAPILogResults contains results of the LogRepository.CreateAPILog
type LogRepositoryMockCreateAPILogResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateAPILog *mLogRepositoryMockCreateAPILog) Optional() *mLogRepositoryMockCreateAPILog {
	mmCreateAPILog.optional = true
	return mmCreateAPILog
}

// Expect sets up expected params for LogRepository.CreateAPILog
func (mmCreateAPILog *mLogRepositoryMockCreateAPILog) Expect(ctx context.Context, params model.CreateAPILogParams) *mLogRepositoryMockCreateAPILog {
	if mmCreateAPILog.mock.funcCreateAPILog != nil {
		mmCreateAPILog.mock.t.Fatalf("LogRepositoryMock.CreateAPILog mock is already set by Set")
	}

	if mmCreateAPILog.defaultExpectation == nil {
		mmCreateAPILog.defaultExpectation = &LogRepositoryMockCreateAPILogExpectation{}
	}

	if mmCreateAPILog.defaultExpectation.paramPtrs != nil {
		mmCreateAPILog.mock.t.Fatalf("LogRepositoryMock.CreateAPILog mock is already set by ExpectParams functions")
	}

	mmCreateAPILog.defaultExpectation.params = &LogRepositoryMockCreateAPILogParams{ctx, params}
	for _, e := range mmCreateAPILog.expectations {
		if minimock.Equal(e.params, mmCreateAPILog.defaultExpectation.params) {
			mmCreateAPILog.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateAPILog.defaultExpectation.params)
		}
	}

	return mmCreateAPILog
}

// ExpectCtxParam1 sets up expected param ctx for LogRepository.CreateAPILog
func (mmCreateAPILog *mLogRepositoryMockCreateAPILog) ExpectCtxParam1(ctx context.Context) *mLogRepositoryMockCreateAPILog {
	if mmCreateAPILog.mock.funcCreateAPILog != nil {
		mmCreateAPILog.mock.t.Fatalf("LogRepositoryMock.CreateAPILog mock is already set by Set")
	}

	if mmCreateAPILog.defaultExpectation == nil {
		mmCreateAPILog.defaultExpectation = &LogRepositoryMockCreateAPILogExpectation{}
	}

	if mmCreateAPILog.defaultExpectation.params != nil {
		mmCreateAPILog.mock.t.Fatalf("LogRepositoryMock.CreateAPILog mock is already set by Expect")
	}

	if mmCreateAPILog.defaultExpectation.paramPtrs == nil {
		mmCreateAPILog.defaultExpectation.paramPtrs = &LogRepositoryMockCreateAPILogParamPtrs{}
	}
	mmCreateAPILog.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCreateAPILog
}

// ExpectParamsParam2 sets up expected param params for LogRepository.CreateAPILog
func (mmCreateAPILog *mLogRepositoryMockCreateAPILog) ExpectParamsParam2(params model.CreateAPILogParams) *mLogRepositoryMockCreateAPILog {
	if mmCreateAPILog.mock.funcCreateAPILog != nil {
		mmCreateAPILog.mock.t.Fatalf("LogRepositoryMock.CreateAPILog mock is already set by Set")
	}

	if mmCreateAPILog.defaultExpectation == nil {
		mmCreateAPILog.defaultExpectation = &LogRepositoryMockCreateAPILogExpectation{}
	}

	if mmCreateAPILog.defaultExpectation.params != nil {
		mmCreateAPILog.mock.t.Fatalf("LogRepositoryMock.CreateAPILog mock is already set by Expect")
	}

	if mmCreateAPILog.defaultExpectation.paramPtrs == nil {
		mmCreateAPILog.defaultExpectation.paramPtrs = &LogRepositoryMockCreateAPILogParamPtrs{}
	}
	mmCreateAPILog.defaultExpectation.paramPtrs.params = &params

	return mmCreateAPILog
}

// Inspect accepts an inspector function that has same arguments as the LogRepository.CreateAPILog
func (mmCreateAPILog *mLogRepositoryMockCreateAPILog) Inspect(f func(ctx context.Context, params model.CreateAPILogParams)) *mLogRepositoryMockCreateAPILog {
	if mmCreateAPILog.mock.inspectFuncCreateAPILog != nil {
		mmCreateAPILog.mock.t.Fatalf("Inspect function is already set for LogRepositoryMock.CreateAPILog")
	}

	mmCreateAPILog.mock.inspectFuncCreateAPILog = f

	return mmCreateAPILog
}

// Return sets up results that will be returned by LogRepository.CreateAPILog
func (mmCreateAPILog *mLogRepositoryMockCreateAPILog) Return(err error) *LogRepositoryMock {
	if mmCreateAPILog.mock.funcCreateAPILog != nil {
		mmCreateAPILog.mock.t.Fatalf("LogRepositoryMock.CreateAPILog mock is already set by Set")
	}

	if mmCreateAPILog.defaultExpectation == nil {
		mmCreateAPILog.defaultExpectation = &LogRepositoryMockCreateAPILogExpectation{mock: mmCreateAPILog.mock}
	}
	mmCreateAPILog.defaultExpectation.results = &LogRepositoryMockCreateAPILogResults{err}
	return mmCreateAPILog.mock
}

// Set uses given function f to mock the LogRepository.CreateAPILog method
func (mmCreateAPILog *mLogRepositoryMockCreateAPILog) Set(f func(ctx context.Context, params model.CreateAPILogParams) (err error)) *LogRepositoryMock {
	if mmCreateAPILog.defaultExpectation != nil {
		mmCreateAPILog.mock.t.Fatalf("Default expectation is already set for the LogRepository.CreateAPILog method")
	}

	if len(mmCreateAPILog.expectations) > 0 {
		mmCreateAPILog.mock.t.Fatalf("Some expectations are already set for the LogRepository.CreateAPILog method")
	}

	mmCreateAPILog.mock.funcCreateAPILog = f
	return mmCreateAPILog.mock
}

// When sets expectation for the LogRepository.CreateAPILog which will trigger the result defined by the following
// Then helper
func (mmCreateAPILog *mLogRepositoryMockCreateAPILog) When(ctx context.Context, params model.CreateAPILogParams) *LogRepositoryMockCreateAPILogExpectation {
	if mmCreateAPILog.mock.funcCreateAPILog != nil {
		mmCreateAPILog.mock.t.Fatalf("LogRepositoryMock.CreateAPILog mock is already set by Set")
	}

	expectation := &LogRepositoryMockCreateAPILogExpectation{
		mock:   mmCreateAPILog.mock,
		params: &LogRepositoryMockCreateAPILogParams{ctx, params},
	}
	mmCreateAPILog.expectations = append(mmCreateAPILog.expectations, expectation)
	return expectation
}

// Then sets up LogRepository.CreateAPILog return parameters for the expectation previously defined by the When method
func (e *LogRepositoryMockCreateAPILogExpectation) Then(err error) *LogRepositoryMock {
	e.results = &LogRepositoryMockCreateAPILogResults{err}
	return e.mock
}

// Times sets number of times LogRepository.CreateAPILog should be invoked
func (mmCreateAPILog *mLogRepositoryMockCreateAPILog) Times(n uint64) *mLogRepositoryMockCreateAPILog {
	if n == 0 {
		mmCreateAPILog.mock.t.Fatalf("Times of LogRepositoryMock.CreateAPILog mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateAPILog.expectedInvocations, n)
	return mmCreateAPILog
}

func (mmCreateAPILog *mLogRepositoryMockCreateAPILog) invocationsDone() bool {
	if len(mmCreateAPILog.expectations) == 0 && mmCreateAPILog.defaultExpectation == nil && mmCreateAPILog.mock.funcCreateAPILog == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateAPILog.mock.afterCreateAPILogCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateAPILog.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateAPILog implements repository.LogRepository
func (mmCreateAPILog *LogRepositoryMock) CreateAPILog(ctx context.Context, params model.CreateAPILogParams) (err error) {
	mm_atomic.AddUint64(&mmCreateAPILog.beforeCreateAPILogCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateAPILog.afterCreateAPILogCounter, 1)

	if mmCreateAPILog.inspectFuncCreateAPILog != nil {
		mmCreateAPILog.inspectFuncCreateAPILog(ctx, params)
	}

	mm_params := LogRepositoryMockCreateAPILogParams{ctx, params}

	// Record call args
	mmCreateAPILog.CreateAPILogMock.mutex.Lock()
	mmCreateAPILog.CreateAPILogMock.callArgs = append(mmCreateAPILog.CreateAPILogMock.callArgs, &mm_params)
	mmCreateAPILog.CreateAPILogMock.mutex.Unlock()

	for _, e := range mmCreateAPILog.CreateAPILogMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreateAPILog.CreateAPILogMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateAPILog.CreateAPILogMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateAPILog.CreateAPILogMock.defaultExpectation.params
		mm_want_ptrs := mmCreateAPILog.CreateAPILogMock.defaultExpectation.paramPtrs

		mm_got := LogRepositoryMockCreateAPILogParams{ctx, params}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateAPILog.t.Errorf("LogRepositoryMock.CreateAPILog got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.params != nil && !minimock.Equal(*mm_want_ptrs.params, mm_got.params) {
				mmCreateAPILog.t.Errorf("LogRepositoryMock.CreateAPILog got unexpected parameter params, want: %#v, got: %#v%s\n", *mm_want_ptrs.params, mm_got.params, minimock.Diff(*mm_want_ptrs.params, mm_got.params))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateAPILog.t.Errorf("LogRepositoryMock.CreateAPILog got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateAPILog.CreateAPILogMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateAPILog.t.Fatal("No results are set for the LogRepositoryMock.CreateAPILog")
		}
		return (*mm_results).err
	}
	if mmCreateAPILog.funcCreateAPILog != nil {
		return mmCreateAPILog.funcCreateAPILog(ctx, params)
	}
	mmCreateAPILog.t.Fatalf("Unexpected call to LogRepositoryMock.CreateAPILog. %v %v", ctx, params)
	return
}

// CreateAPILogAfterCounter returns a count of finished LogRepositoryMock.CreateAPILog invocations
func (mmCreateAPILog *LogRepositoryMock) CreateAPILogAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateAPILog.afterCreateAPILogCounter)
}

// CreateAPILogBeforeCounter returns a count of LogRepositoryMock.CreateAPILog invocations
func (mmCreateAPILog *LogRepositoryMock) CreateAPILogBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateAPILog.beforeCreateAPILogCounter)
}

// Calls returns a list of arguments used in each call to LogRepositoryMock.CreateAPILog.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateAPILog *mLogRepositoryMockCreateAPILog) Calls() []*LogRepositoryMockCreateAPILogParams {
	mmCreateAPILog.mutex.RLock()

	argCopy := make([]*LogRepositoryMockCreateAPILogParams, len(mmCreateAPILog.callArgs))
	copy(argCopy, mmCreateAPILog.callArgs)

	mmCreateAPILog.mutex.RUnlock()

	return argCopy
}

// MinimockCreateAPILogDone returns true if the count of the CreateAPILog invocations corresponds
// the number of defined expectations
func (m *LogRepositoryMock) MinimockCreateAPILogDone() bool {
	if m.CreateAPILogMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateAPILogMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateAPILogMock.invocationsDone()
}

// MinimockCreateAPILogInspect logs each unmet expectation
func (m *LogRepositoryMock) MinimockCreateAPILogInspect() {
	for _, e := range m.CreateAPILogMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LogRepositoryMock.CreateAPILog with params: %#v", *e.params)
		}
	}

	afterCreateAPILogCounter := mm_atomic.LoadUint64(&m.afterCreateAPILogCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateAPILogMock.defaultExpectation != nil && afterCreateAPILogCounter < 1 {
		if m.CreateAPILogMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LogRepositoryMock.CreateAPILog")
		} else {
			m.t.Errorf("Expected call to LogRepositoryMock.CreateAPILog with params: %#v", *m.CreateAPILogMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateAPILog != nil && afterCreateAPILogCounter < 1 {
		m.t.Error("Expected call to LogRepositoryMock.CreateAPILog")
	}

	if !m.CreateAPILogMock.invocationsDone() && afterCreateAPILogCounter > 0 {
		m.t.Errorf("Expected %d calls to LogRepositoryMock.CreateAPILog but found %d calls",
			mm_atomic.LoadUint64(&m.CreateAPILogMock.expectedInvocations), afterCreateAPILogCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LogRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateAPILogInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LogRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LogRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateAPILogDone()
}
